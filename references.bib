@article{Suri2011,
    author = {Suri, Bharti},
    file = {:Users/sitdh/OneDrive/Documents/Chula/Publications/Resources/Software Testing/Prioritizations/10.1.1.451.952.pdf:pdf},
    journal = {International Journal},
    keywords = {- regression testing,ant colony optimization,implementation,test case,test case selection},
    mendeley-groups = {Prioritization},
    number = {5},
    pages = {1924--1932},
    title = {{Implementing Ant Colony Optimization for Test Case Selection and Prioritization}},
    volume = {3},
    year = {2011}
}

@article{Jaroenpiboonkit2007,
    author = {Jaroenpiboonkit, Jutarat and Suwannasart, Taratip},
    doi = {10.1109/APSEC.2007.58},
    file = {:Users/sitdh/OneDrive/Documents/Chula/Publications/Resources/Software Testing/Testing/04425836.pdf:pdf},
    isbn = {0769530575},
    issn = {15301362},
    journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
    keywords = {Integration testing,Object-oriented program slicing,Test orders},
    mendeley-groups = {Testing},
    pages = {49--56},
    title = {{Finding a test order using object-oriented slicing technique}},
    year = {2007}
}
@article{Luo2001,
    abstract = {Software testing is as old as the hills in the history of digital computers. The testing of software is an important means of assessing the software to determine its quality. Since testing typically consumes 40{\~{}}50{\%} of development efforts, and consumes more effort for systems that require higher levels of reliability, it is a significant part of the software engineering. With the development of Fourth generation languages (4GL), which speeds up the implementation process, the proportion of time devoted to testing increased. As the amount of maintenance and upgrade of existing systems grow, significant amount of testing will also be needed to verify systems after changes are made [12]. Despite advances in formal methods and verification techniques, a system still needs to be tested before it is used. Testing remains the truly effective means to assure the quality of a software system of non-trivial complexity [13], as well as one of the most intricate and least understood areas in software engineering [19]. Testing, an important research area within computer science is likely to become even more important in the future},
    author = {Luo, Lu},
    file = {:Users/sitdh/Library/Application Support/Mendeley Desktop/Downloaded/Luo - 2001 - Software testing techniques.pdf:pdf},
    isbn = {8177222600},
    journal = {Institute for software research international Carnegie mellon university Pittsburgh, PA},
    mendeley-groups = {Testing},
    number = {1-19},
    pages = {19},
    title = {{Software testing techniques}},
    volume = {15232},
    year = {2001}
}

@article{Orso2014,
    abstract = {Despite decades ofwork by researchers and practitioners on numer- ous software quality assurance techniques, testing remains one of the most widely practiced and studied approaches for assessing and improving software quality. Our goal, in this paper, is to provide an accounting of some of the most successful research performed in software testing since the year 2000, and to present what appear to be some of the most significant challenges and opportunities in this area. To be more inclusive in this effort, and to go beyond our own personal opinions and biases, we began by contacting over 50 of our colleagues who are active in the testing research area, and asked them what they believed were (1) the most significant contributions to software testing since 2000 and (2) the greatest open challenges and opportunities for future research in this area. While our col- leagues' input (consisting of about 30 responses) helped guide our choice of topics to cover and ultimately the writing of this paper, we by no means claim that our paper represents all the relevant and noteworthy research performed in the area of software testing in the time period considered—a task that would require far more space and time than we have available. Nevertheless, we hope that the approach we followed helps this paper better reflect not only our views, but also those of the software testing community in general},
    author = {Orso, Alessandro and Rothermel, Gregg},
    doi = {10.1145/2593882.2593885},
    file = {:Users/sitdh/Library/Application Support/Mendeley Desktop/Downloaded/Orso, Rothermel - 2014 - Software testing a research travelogue (2000–2014).pdf:pdf},
    isbn = {9781450328654},
    journal = {Proceedings of the on Future of Software Engineering - FOSE 2014},
    keywords = {Software testing},
    mendeley-groups = {Testing},
    pages = {117--132},
    title = {{Software testing: a research travelogue (2000–2014)}},
    url = {http://dl.acm.org/citation.cfm?id=2593882.2593885},
    year = {2014}
}

@article{Elbaum2002,
    author = {Elbaum, Sebastian and Rothermel, Gregg and Elbaum, Sebastian and Malishevsky, Alexey G and Member, Student},
    file = {:Users/sitdh/OneDrive/Documents/Chula/Publications/Resources/Software Testing/Prioritizations/00988497.pdf:pdf},
    mendeley-groups = {Prioritization},
    number = {2},
    pages = {159--182},
    title = {{Test Case Prioritization : A Family of Empirical Studies Test Case Prioritization : A Family of Empirical Studies}},
    volume = {28},
    year = {2002}
}

@article{Larprattanakul2013,
    abstract = {Regression testing is one important step in software development activities to ensure a new change does not have a negative impact to unchanged parts. Regression test case selection is an approach to reduce time and resource consumption in regression testing. We present a framework of regression test case selection by using object dependency graph as a change identifier and identifying the test cases which are worthwhile to be rerun in object-oriented software.},
    author = {Larprattanakul, Adipat and Suwannasart, Taratip},
    doi = {10.1109/INCoS.2013.115},
    file = {:Users/sitdh/OneDrive/Documents/Chula/Publications/Resources/Software Testing/Prioritizations/06630498.pdf:pdf},
    isbn = {978-0-7695-4988-0},
    journal = {2013 5th International Conference on Intelligent Networking and Collaborative Systems},
    keywords = {- object dependency graph,regression test case selection,regression testing},
    mendeley-groups = {Prioritization},
    pages = {617--621},
    title = {{An Approach for Regression Test Case Selection Using Object Dependency Graph}},
    url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6630498},
    year = {2013}
}

@article{Singh2010,
    author = {Singh, Yogesh and Kaur, Arvinder and Suri, Bharti},
    doi = {10.1145/1811226.1811238},
    file = {:Users/sitdh/OneDrive/Documents/Chula/Publications/Resources/Software Testing/Prioritizations/p1-singh-2.pdf:pdf},
    issn = {01635948},
    journal = {ACM SIGSOFT Software Engineering Notes},
    keywords = {- r egression testing,ant colony optimization,prioritization,test case,test case selection},
    mendeley-groups = {Prioritization},
    number = {4},
    pages = {1},
    title = {{Test case prioritization using ant colony optimization}},
    url = {http://portal.acm.org/citation.cfm?doid=1811226.1811238},
    volume = {35},
    year = {2010}
}

@article{Marick1999,
    abstract = {Code coverage tools measure how thoroughly tests exercise programs. I believe they are misused more often than they're used well. This paper describes common misuses in detail, then argues for a particular cautious approach to the use of coverage. There are other ways to measure the thoroughness of tests. See [Kaner96] for a list. These ways all fit under the umbrella term “test coverage.” My claims in this paper are specific to code coverage.},
    author = {Marick, Brian},
    file = {:Users/sitdh/Library/Application Support/Mendeley Desktop/Downloaded/Marick - 1999 - How to Misuse Code Coverage.pdf:pdf},
    isbn = {9781605585390},
    journal = {Reliable Software Technologies},
    mendeley-groups = {Coverage Analysis},
    pages = {1--13},
    title = {{How to Misuse Code Coverage}},
    year = {1999}
}
}
